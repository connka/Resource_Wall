#### Link to projet requirements: (https://web-compass.lighthouselabs.ca/projects/w4-midterm-proj);

1) Install postman for sending request without frontend.
2) Fireframe
3) ERD
4) Define routes

#### TABLES FOR DATABASE ####

- users  
    // id(PK),username,password,created_at
- profile
    // id(PK),id(users)FK,name,email,intrests,location,created_at,last_updated_at 
- intrests  
    // id(PK),name 
- resourses 
    // id(PK),url,title,description,type,created_at,last_updated_at
-user_intrests
    // id(PK),id(users)FK,id(intrests)FK
- user_resourse 
    // id(PK),id(users)FK,id(resourses)FK
- user_likes 
    //id(PK), id(users)FK,id(resourses)FK,created_at,last_updated_at
- user_comments
    // id(PK),text, id(users)FK , id(resourses)FK ,created_at,last_updated_at 
- user_resourse_rating
    // id(PK),id(users)FK , id(resourses)FK,rating,created_at,last_updated_at

### MIGRATION TABLES ###

$$$$$ USERS $$$$$$

exports.up = function(knex, Promise) {
  return knex.schema
    .createTable('users', function(table) {
      table.increments('id');
      table
        .string('username')
        .unique()
        .notNullable();
      table.string('password').notNullable();
      table.timestamp('created_at').defaultTo(knex.fn.now());
    })
    .createTable('profiles', function(table) {
      table.increments('id');
      table
        .integer('user_id')
        .references('id')
        .inTable('users')
        .notNull()
        .onDelete('cascade');
      table.string('name');
      table.string('email');
      table.string('location');
      table.timestamp('created_at').defaultTo(knex.fn.now());
      table.timestamp('updated_at').defaultTo(knex.fn.now());
    });
};
exports.down = function(knex, Promise) {
  return knex.schema.dropTable('profiles').dropTable('users');
};


$$$$$ INTRESTS $$$$$$

exports.up = function(knex, Promise) {
  return knex.schema.createTable('intrests', function(table) {
    table.increments('id');
    table
      .string('name')
      .unique()
      .notNullable();
    table.timestamp('created_at').defaultTo(knex.fn.now());
    table.timestamp('updated_at').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('intrests');
};

$$$$$ RESOURCES $$$$$$
exports.up = function(knex, Promise) {
  return knex.schema.createTable('resourses', function(table) {
    table.increments('id');
    table
      .string('url')
      .unique()
      .notNullable();
    table
      .string('title')
      .unique()
      .notNullable();
    table
      .string('description')
      .unique()
      .notNullable();
    table
      .integer('intrest_id')
      .references('id')
      .inTable('intrests');
    table.timestamp('created_at').defaultTo(knex.fn.now());
    table.timestamp('updated_at').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('resourses');
};


$$$$$ USER_INTRESTS $$$$$$
exports.up = function(knex, Promise) {
  return knex.schema.createTable('user_intrests', function(table) {
    table.increments('id');
    table
      .integer('user_id')
      .references('id')
      .inTable('users');
    table
      .integer('intrest_id')
      .references('id')
      .inTable('intrests');
    table.timestamp('created_at').defaultTo(knex.fn.now());
    table.timestamp('updated_at').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('user_intrests');
};

$$$$$ USER_RESOURSES $$$$$$

exports.up = function(knex, Promise) {
  return knex.schema.createTable('user_resourses', function(table) {
    table.increments('id');
    table
      .integer('user_id')
      .references('id')
      .inTable('users');
    table
      .integer('resourse_id')
      .references('id')
      .inTable('resourses');
    table.timestamp('created_at').defaultTo(knex.fn.now());
    table.timestamp('updated_at').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('user_resourses');
};


$$$$$ USER_LIKES $$$$$$

exports.up = function(knex, Promise) {
  return knex.schema.createTable('user_likes', function(table) {
    table.increments('id');
    table
      .integer('user_id')
      .references('id')
      .inTable('users');
    table
      .integer('resourse_id')
      .references('id')
      .inTable('resourses');
    table.timestamp('created_at').defaultTo(knex.fn.now());
    table.timestamp('updated_at').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('user_likes');
};

$$$$$ USER_COMMENTS $$$$$$

exports.up = function(knex, Promise) {
  return knex.schema.createTable('user_comments', function(table) {
    table.increments('id');
    table.string('text').notNullable();
    table
      .integer('user_id')
      .references('id')
      .inTable('users');
    table
      .integer('resourse_id')
      .references('id')
      .inTable('resourses');
    table.timestamp('created_at').defaultTo(knex.fn.now());
    table.timestamp('updated_at').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('user_comments');
};


$$$$$ USER_resourse_rating $$$$$$
exports.up = function(knex, Promise) {
  return knex.schema.createTable('user_resourse_rating', function(table) {
    table.increments('id');
    table.integer('rating').notNullable();
    table
      .integer('user_id')
      .references('id')
      .inTable('users');
    table
      .integer('resourse_id')
      .references('id')
      .inTable('resourses');
    table.timestamp('created_at').defaultTo(knex.fn.now());
    table.timestamp('updated_at').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('user_resourse_rating');
};
    

####### SEEDS TABLES ########   

&&& USERS &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('users')
    .del()
    .then(function() {
      // Inserts seed entries
      return knex('users').insert([
        { id: 1, username: 'user1', password: 'user1' },
        { id: 2, username: 'user2', password: 'user2' },
        { id: 3, username: 'user3', password: 'user3' }
      ]);
    });
};

&&& PROFILES &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('users')
    .del()
    .then(function() {
      // Inserts seed entries
      return knex('users').insert([
        { id: 1, username: 'user1', password: 'user1' },
        { id: 2, username: 'user2', password: 'user2' },
        { id: 3, username: 'user3', password: 'user3' }
      ]);
    });
};

&&& INTRESTS &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('intrests')
    .del()
    .then(function() {
      // Inserts seed entries
      return knex('intrests').insert([
        { id: 1, name: 'sports' },
        { id: 2, name: 'web development' },
        { id: 3, name: 'Food' }
      ]);
    });
};

&&& RESOURSES &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('resourses')
    .del()
    .then(function() {
      // Inserts seed entries
      return knex('resourses').insert([
        {
          id: 1,
          url: 'https://knexjs.org/',
          title: 'knexjs',
          description: 'knex js for database query',
          intrest_id: '2'
        },
        {
          id: 2,
          url: 'https://www.foodnetwork.ca/',
          title: 'food network canada',
          description: 'food network canada',
          intrest_id: '3'
        },
        {
          id: 3,
          url: 'https://www.nhl.com/flames',
          title: 'Calgary flames',
          description: 'Calgary flames nhl page',
          intrest_id: '1'
        }
      ]);
    });
};


&&& USER_INTRESTS &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('user_intrests')
    .del()
    .then(function() {
      return Promise.all([
        // Inserts seed entries
        knex('user_intrests').insert({
          id: 1,
          user_id: '1',
          intrest_id: '1'
        }),
        knex('user_intrests').insert({ id: 2, user_id: '2', intrest_id: '2' }),
        knex('user_intrests').insert({ id: 3, user_id: '3', intrest_id: '3' })
      ]);
    });
};


&&& USER_RESOURSES &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('user_resourses')
    .del()
    .then(function() {
      return Promise.all([
        // Inserts seed entries
        knex('user_resourses').insert({
          id: 1,
          user_id: '1',
          resourse_id: '1'
        }),
        knex('user_resourses').insert({
          id: 2,
          user_id: '2',
          resourse_id: '2'
        }),
        knex('user_resourses').insert({ id: 3, user_id: '3', resourse_id: '3' })
      ]);
    });
};

&&& USERS_LIKES &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('user_likes')
    .del()
    .then(function() {
      return Promise.all([
        // Inserts seed entries
        knex('user_likes').insert({
          id: 1,
          user_id: '1',
          resourse_id: '3'
        }),
        knex('user_likes').insert({
          id: 2,
          user_id: '2',
          resourse_id: '1'
        }),
        knex('user_likes').insert({ id: 3, user_id: '3', resourse_id: '2' })
      ]);
    });
};

&&& USER_COMMENTS &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('user_comments')
    .del()
    .then(function() {
      return Promise.all([
        // Inserts seed entries
        knex('user_comments').insert({
          id: 1,
          text: 'great resourse!!!!',
          user_id: '1',
          resourse_id: '3'
        }),
        knex('user_comments').insert({
          id: 2,
          text: 'loved it ,sharemore like these',
          user_id: '2',
          resourse_id: '1'
        }),
        knex('user_comments').insert({
          id: 3,
          text: 'i do not agree with the author',
          user_id: '3',
          resourse_id: '2'
        })
      ]);
    });
};


&&& USER_RESOURSE_RATING &&&

exports.seed = function(knex, Promise) {
  // Deletes ALL existing entries
  return knex('user_resourse_rating')
    .del()
    .then(function() {
      return Promise.all([
        // Inserts seed entries
        knex('user_resourse_rating').insert({
          id: 1,
          rating: '4',
          user_id: '1',
          resourse_id: '3'
        }),
        knex('user_resourse_rating').insert({
          id: 2,
          rating: '3',
          user_id: '2',
          resourse_id: '1'
        }),
        knex('user_resourse_rating').insert({
          id: 3,
          rating: '5',
          user_id: '3',
          resourse_id: '2'
        })
      ]);
    });
};
















  
